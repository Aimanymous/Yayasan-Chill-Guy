name: Deploy Multi-Service App to Cloud Run

on:
  push:
    branches: [ "monitoring" ]

env:
  DOCKER_HUB_USERNAME: aimanahmad0004
  REPOSITORY_NAME: monitor
  PROJECT_ID: chillguys
  REGION: asia-southeast1
  NODE_ENV: production

jobs:
  deploy-cloud-run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version || echo "Docker Compose installation failed"

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Build and push Docker images for each service in docker-compose.yml
      - name: Build and push Docker images
        run: |
          docker-compose -f docker-compose.yml build  # Build images for all services
          docker-compose -f docker-compose.yml push   # Push the images to Docker Hub

      # Google Auth for GCP
      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Deploy each service to Cloud Run
      - name: Deploy to Cloud Run
        run: |
          services=$(docker-compose -f docker-compose.yml config --services)  # Get list of services from docker-compose
          for service in $services; do
            docker_image="${{ env.DOCKER_HUB_USERNAME }}/${{ env.REPOSITORY_NAME }}-${service}:${{ github.sha }}"
            gcloud run deploy $service \
              --image $docker_image \
              --region ${{ env.REGION }} \
              --allow-unauthenticated \
              --platform managed \
              --project ${{ env.PROJECT_ID }} \
              --set-env-vars NODE_ENV=${{ env.NODE_ENV }}
          done
